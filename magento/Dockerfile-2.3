ARG PHP_VERSION=php74-fpm
FROM srcoder/development-php:${PHP_VERSION}

ARG MAGENTO_VERSION=2.4.1
ARG MAGENTO_TYPE=project-community-edition
ARG SAMPLE_DATA=false

ENV CI=true
ENV URL=http://localhost/
ENV FLAT_TABLES=false

COPY scripts/install-phpstan.php scripts/install-phpstan.php
COPY patches/vertex-compilation-issue.patch vertex-compilation-issue.patch
COPY patches/APSB22-12/MDVA-43395_EE_2.4.3-p1_COMPOSER_v1.patch MDVA-43395_EE_2.4.3-p1_COMPOSER_v1.patch
COPY patches/APSB22-12/MDVA-43443_EE_2.3.4_COMPOSER_v1.patch MDVA-43443_EE_2.3.4_COMPOSER_v1.patch
COPY patches/APSB22-12/MDVA-43443_EE_2.4.2-p2_COMPOSER_v1.patch MDVA-43443_EE_2.4.2-p2_COMPOSER_v1.patch

RUN apt update --fix-missing && \
    export DEBIAN_FRONTEND=noninteractive && \
    apt install -y gnupg procps apt-transport-https lsb-release software-properties-common && \
    curl -L https://artifacts.elastic.co/GPG-KEY-elasticsearch | apt-key add - && \
    echo "deb https://artifacts.elastic.co/packages/7.x/apt stable main" | tee -a /etc/apt/sources.list.d/elastic-7.x.list && \
    wget https://repo.mysql.com//mysql-apt-config_0.8.18-1_all.deb && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 467B942D3A79BD29 && \
    dpkg -i mysql-apt-config_0.8.18-1_all.deb && \
    apt update && \
    echo "[mysqld]\ndefault-authentication-plugin=mysql_native_password" > ~/.my.cnf && \
    apt install -y elasticsearch mysql-server mysql-client && \
    rm -rf /var/lib/apt/lists/* && \
    sed -i "s/.*bind-address.*/bind-address = 0.0.0.0/" /etc/mysql/mysql.conf.d/mysqld.cnf && \
    echo 'memory_limit = 4G' >> /usr/local/etc/php/conf.d/memory-limit-php.ini && \
    echo 'max_execution_time = 300' >> /usr/local/etc/php/conf.d/memory-limit-php.ini && \
    rm /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini && \
    curl -o magento.zip https://repo-magento-mirror.fooman.co.nz/dist/magento/$MAGENTO_TYPE/magento-$MAGENTO_TYPE-$MAGENTO_VERSION.zip && \
    unzip -q magento.zip -d . && \
    rm magento.zip && \
    composer global require hirak/prestissimo && \
    composer config --unset repositories.0 && \
    composer config repositories.fooman composer https://repo-magento-mirror.fooman.co.nz/ && \
    composer install && \
    if [ -f "/data/vendor/magento/module-inventory-catalog/etc/communication.xml" ]; then sed -i 's/is_synchronous="false"//g' /data/vendor/magento/module-inventory-catalog/etc/communication.xml; fi && \
    if [ -f "/data/vendor/magento/module-inventory-sales/etc/communication.xml" ]; then sed -i 's/is_synchronous="false"//g' /data/vendor/magento/module-inventory-sales/etc/communication.xml; fi && \
    if [ -f "/data/vendor/magento/module-inventory-indexer/etc/communication.xml" ]; then sed -i 's/is_synchronous="false"//g' /data/vendor/magento/module-inventory-indexer/etc/communication.xml; fi && \
    service elasticsearch start && \
    /bin/bash -c "/usr/bin/mysqld_safe &" && \
    sleep 5 && \
    mysql -u root -e 'CREATE DATABASE `magento`;' && \
    mysql -u root -e 'CREATE DATABASE `magento-test`;' && \
    mysql -u root -e "CREATE USER 'magento'@'%' IDENTIFIED BY 'password';" && \
    mysql -u root -e "CREATE USER 'magento-test'@'%' IDENTIFIED BY 'password';" && \
    mysql -u root -e "GRANT ALL PRIVILEGES ON * . * TO 'magento'@'%';" && \
    mysql -u root -e "GRANT ALL PRIVILEGES ON * . * TO 'magento-test'@'%';" && \
    sleep 5 && \
    php bin/magento setup:install --backend-frontname=admin --session-save=db --db-host=127.0.0.1 --db-name=magento --db-user=magento --db-password=password --base-url=http://localhost --timezone=Europe/Amsterdam --currency=EUR --admin-user=exampleuser --admin-password=examplepassword123 --admin-email=user@example.com --admin-firstname=Example --admin-lastname=Example --use-rewrites=1 --use-sample-data && \
    php bin/magento deploy:mode:set developer && \
    if (( $(php -r 'echo version_compare(getenv("MAGENTO_VERSION"), "2.3.3", ">") ? "true" : "false";') = "true" )); then echo "applying MDVA-43395_EE_2.4.3-p1_COMPOSER_v1.patch"; git apply MDVA-43395_EE_2.4.3-p1_COMPOSER_v1.patch; fi && \
    if (( $(php -r 'echo version_compare(getenv("MAGENTO_VERSION"), "2.3.3-p1", ">=") && version_compare(getenv("MAGENTO_VERSION"), "2.3.4", "<=") ? "true" : "false";') = "true" )); then echo "applying MDVA-43443_EE_2.3.4_COMPOSER_v1.patch"; git apply MDVA-43443_EE_2.3.4_COMPOSER_v1.patch; fi && \
    if (( $(php -r 'echo version_compare(getenv("MAGENTO_VERSION"), "2.3.4-p2", ">=") ? "true" : "false";') = "true" )); then echo "applying MDVA-43443_EE_2.4.2-p2_COMPOSER_v1.patch"; git apply MDVA-43443_EE_2.4.2-p2_COMPOSER_v1.patch; fi && \
    if (( $(php -r 'echo substr(getenv("MAGENTO_VERSION"), 0, 5) == "2.3.3" ? "true" : "false";') = "true" )); then echo "applying vertex-compilation-issue.patch"; git apply vertex-compilation-issue.patch; fi && \
    echo "Running scconnector_google_remove_cl queries" && \
    mysql -u root magento -e 'CREATE TABLE IF NOT EXISTS `scconnector_google_remove_cl` (`version_id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT "Version ID", `entity_id` int(10) unsigned NOT NULL DEFAULT "0" COMMENT "Entity ID", PRIMARY KEY (`version_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT="scconnector_google_remove_cl";' && \
    mysql -u root magento -e 'INSERT INTO `scconnector_google_remove_cl` (`version_id`, `entity_id`) VALUES ('1', '1');' && \
    mysql -u root magento -e 'alter table `scconnector_google_remove_cl` auto_increment = 1;' && \
    if [ "${SAMPLE_DATA}" = "true" ]; then echo "Running php bin/magento sampledata:deploy"; php bin/magento sampledata:deploy; fi && \
    if [ "${SAMPLE_DATA}" = "true" ]; then echo "Running setup:upgrade" && (php bin/magento setup:upgrade || php bin/magento setup:upgrade || php bin/magento setup:upgrade); fi && \
    php bin/magento setup:di:compile && \
    php bin/magento indexer:reindex && \
    mkdir -p extensions && \
    composer config repositories.dev-extensions path extensions/* && \
    php scripts/install-phpstan.php && \
    rm scripts/install-phpstan.php

COPY patches/cors.patch cors.patch
COPY templates/install-config-mysql.php dev/tests/integration/etc/
COPY templates/post-install-setup-command-config.php dev/tests/integration/etc/
COPY templates/phpunit-unit.xml dev/tests/unit/phpunit.xml
COPY templates/phpunit-integration.xml dev/tests/integration/phpunit.xml
COPY entrypoint.sh entrypoint.sh

COPY scripts/enable-flat-catalog enable-flat-catalog
COPY scripts/change-base-url change-base-url

RUN chmod +x enable-flat-catalog && chmod +x change-base-url

RUN git apply cors.patch && rm cors.patch vertex-compilation-issue.patch

ENTRYPOINT ["/bin/bash", "entrypoint.sh"]

EXPOSE 80 3306
